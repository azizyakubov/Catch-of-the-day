{"ast":null,"code":"import _objectSpread from \"/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/App.js\";\nimport React from \"react\";\nimport Header from \"./Header\";\nimport Inventory from \"./Inventory\";\nimport Order from \"./Order\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\";\nimport base from \"../base\";\nimport PropTypes from \"prop-types\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fishes: {},\n      order: {}\n    };\n\n    _this.addFish = function (fish) {\n      //In order to update state, you need to use React setState API\n      //1.Take a copy of existing state\n      var fishes = _objectSpread({}, _this.state.fishes); //2.Add our new fish to the fishes variable\n\n\n      fishes[\"fish\".concat(Date.now())] = fish; //3.Set the new fishes object to state, override\n\n      _this.setState({\n        fishes: fishes\n      }); //pass this into the Inventory compnent below\n\n    };\n\n    _this.updateFish = function (key, updatedFish) {\n      //1.take a copy of the current state\n      var fishes = _objectSpread({}, _this.state.fishes); //2.Update the state\n\n\n      fishes[key] = updatedFish; //3.set that to state\n\n      _this.setState({\n        fishes: fishes\n      });\n    };\n\n    _this.deleteFish = function (key) {\n      //1.take a copy of state\n      var fishes = _objectSpread({}, _this.state.fishes); //2.update the state for firebase because it needs a null for deletion\n\n\n      fishes[key] = null; //3. update the state\n\n      _this.setState({\n        fishes: fishes\n      }); //4.pass it downstream to editfishform.js\n\n    };\n\n    _this.loadSampleFishes = function () {\n      _this.setState({\n        fishes: sampleFishes\n      });\n    };\n\n    _this.addToOrder = function (key) {\n      // Take a copy of state\n      var order = _objectSpread({}, _this.state.order); // Either add to the order or update the order\n\n\n      order[key] = order[key] + 1 || 1; // call setState to update our state object\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    _this.removeFromOrder = function (key) {\n      // Take a copy of state\n      var order = _objectSpread({}, _this.state.order); // remove the item from order. Since we don't need to mirror to firebase, you can use delete instead of setting to null\n\n\n      delete order[key]; // call setState to update our state object\n\n      _this.setState({\n        order: order\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = this.props.match.params; //first reinstate our local storage\n\n      var localStorageRef = localStorage.getItem(params.storeId);\n\n      if (localStorageRef) {\n        this.setState({\n          order: JSON.parse(localStorageRef)\n        });\n      }\n\n      this.ref = base.syncState(\"\".concat(params.storeId, \"/fishes\"), {\n        context: this,\n        state: \"fishes\"\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\n    } //stop listening to changes on the database level when the App component is unmmounted\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      base.removeBinding(this.ref);\n    } //any custom fuction that updates state needs to live in the same component that the state lives in, ie App.js\n    //and can be passed on as props as shown below inside <inventory />\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"catch-of-the-day\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Header, {\n        tagline: \"Fresh Seafood Market\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        className: \"fishes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, Object.keys(this.state.fishes).map(function (key) {\n        return (// for react to be fast, it needs to be able to iterate over all the elements and find that specific component Fast.\n          // To do so, it needs a unique identifier \"key={}\" for the thing it renders, which is usually an id from a database, but in our case can be set to anything, which is the key of the object Fishes.\n          // However, the key prop is not displayed in dev tools, so you need to add another attribute, something like index={} if you want to pull the value of the key out\n          React.createElement(Fish, {\n            key: key,\n            index: key,\n            details: _this2.state.fishes[key],\n            addToOrder: _this2.addToOrder,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          })\n        );\n      }))), React.createElement(Order, {\n        fishes: this.state.fishes,\n        order: this.state.order,\n        removeFromOrder: this.removeFromOrder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Inventory, {\n        addFish: this.addFish,\n        loadSampleFishes: this.loadSampleFishes,\n        fishes: this.state.fishes,\n        updateFish: this.updateFish,\n        deleteFish: this.deleteFish,\n        storeId: this.props.match.query.storeId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nApp.propTypes = {\n  match: PropTypes.object\n};\nexport default App;","map":{"version":3,"sources":["/home/aziz/Documents/Practice code/React/React-For-Beginners-Starter-Files-master/catch-of-the-day/src/components/App.js"],"names":["React","Header","Inventory","Order","sampleFishes","Fish","base","PropTypes","App","state","fishes","order","addFish","fish","Date","now","setState","updateFish","key","updatedFish","deleteFish","loadSampleFishes","addToOrder","removeFromOrder","params","props","match","localStorageRef","localStorage","getItem","storeId","JSON","parse","ref","syncState","context","setItem","stringify","removeBinding","Object","keys","map","query","Component","propTypes","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Header from \"./Header\";\nimport Inventory from \"./Inventory\";\nimport Order from \"./Order\";\nimport sampleFishes from \"../sample-fishes\";\nimport Fish from \"./Fish\";\nimport base from \"../base\";\nimport PropTypes from \"prop-types\";\n\nclass App extends React.Component {\n  state = {\n    fishes: {},\n    order: {}\n  };\n  static propTypes = {\n    match: PropTypes.object\n  };\n  componentDidMount() {\n    const { params } = this.props.match;\n    //first reinstate our local storage\n    const localStorageRef = localStorage.getItem(params.storeId);\n    if (localStorageRef) {\n      this.setState({ order: JSON.parse(localStorageRef) });\n    }\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\n      context: this,\n      state: \"fishes\"\n    });\n  }\n  componentDidUpdate() {\n    localStorage.setItem(\n      this.props.match.params.storeId,\n      JSON.stringify(this.state.order)\n    );\n  }\n  //stop listening to changes on the database level when the App component is unmmounted\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n  //any custom fuction that updates state needs to live in the same component that the state lives in, ie App.js\n  //and can be passed on as props as shown below inside <inventory />\n  addFish = fish => {\n    //In order to update state, you need to use React setState API\n    //1.Take a copy of existing state\n    const fishes = { ...this.state.fishes };\n    //2.Add our new fish to the fishes variable\n    fishes[`fish${Date.now()}`] = fish;\n    //3.Set the new fishes object to state, override\n    this.setState({\n      fishes: fishes\n    });\n    //pass this into the Inventory compnent below\n  };\n\n  updateFish = (key, updatedFish) => {\n    //1.take a copy of the current state\n    const fishes = { ...this.state.fishes };\n    //2.Update the state\n    fishes[key] = updatedFish;\n    //3.set that to state\n    this.setState({ fishes: fishes });\n  };\n\n  deleteFish = key => {\n    //1.take a copy of state\n    const fishes = { ...this.state.fishes };\n    //2.update the state for firebase because it needs a null for deletion\n    fishes[key] = null;\n    //3. update the state\n    this.setState({ fishes });\n    //4.pass it downstream to editfishform.js\n  };\n  loadSampleFishes = () => {\n    this.setState({ fishes: sampleFishes });\n  };\n\n  addToOrder = key => {\n    // Take a copy of state\n    const order = { ...this.state.order };\n    // Either add to the order or update the order\n    order[key] = order[key] + 1 || 1;\n    // call setState to update our state object\n    this.setState({ order });\n  };\n  removeFromOrder = key => {\n    // Take a copy of state\n    const order = { ...this.state.order };\n    // remove the item from order. Since we don't need to mirror to firebase, you can use delete instead of setting to null\n    delete order[key];\n    // call setState to update our state object\n    this.setState({ order });\n  };\n  render() {\n    return (\n      <div className=\"catch-of-the-day\">\n        <div className=\"menu\">\n          <Header tagline=\"Fresh Seafood Market\" />\n          <ul className=\"fishes\">\n            {Object.keys(this.state.fishes).map(key => (\n              // for react to be fast, it needs to be able to iterate over all the elements and find that specific component Fast.\n              // To do so, it needs a unique identifier \"key={}\" for the thing it renders, which is usually an id from a database, but in our case can be set to anything, which is the key of the object Fishes.\n              // However, the key prop is not displayed in dev tools, so you need to add another attribute, something like index={} if you want to pull the value of the key out\n              <Fish\n                key={key}\n                index={key}\n                details={this.state.fishes[key]}\n                addToOrder={this.addToOrder}\n              />\n            ))}\n          </ul>\n        </div>\n        <Order\n          fishes={this.state.fishes}\n          order={this.state.order}\n          removeFromOrder={this.removeFromOrder}\n        />\n        <Inventory\n          addFish={this.addFish}\n          loadSampleFishes={this.loadSampleFishes}\n          fishes={this.state.fishes}\n          updateFish={this.updateFish}\n          deleteFish={this.deleteFish}\n          storeId={this.props.match.query.storeId}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}